import * as DBus from 'dbus-next';
import { 
    LooselyTypedEmitter, EventListenerSignature,
    wrapDbusVariant, wrapDbusSignature,
    unwrapDbusVariantObject, unwrapDbusVariant, unwrapDbusSignature
} from '../utilts';

/*
 * Generated by dbus-next interface generator
 * Template: typescript-class-auto.ts.hbs
 */

{{#if xmlData}}
// Introspection XML of {{serviceName}} at {{objectPath}}
const XMLObjectData = `{{xmlData}}`;
{{/if}}

{{#each interfaces}}
{{#ifany signal.length property}}
/***** Signals for {{$.name}} *****/
interface {{className $.name}}Events {
{{#each signal}}
    //@signal({ name: '{{$.name}}', signature: '{{signature arg}}' })
    "{{$.name}}": ({{#each arg}}{{varName $.name}}: {{tsType $.type}}{{#unless @last}}, {{/unless}}{{/each}}) => void;
{{/each}}{{#if property}}
    "PropertiesChanged": (iface: string, changedProperties: {[key:string]: any}, invalidatedProperties: string[]) => void;{{/if}}
}{{/ifany}}
{{#if property}}
/***** Properties of {{$.name}} *****/
export interface {{className $.name}}Props {
{{#each property}}
    {{$.name}}: {{tsType $.type}};
{{/each}}
}
{{/if}}
/**
 * Service: {{../serviceName}}
 * ObjectPath: {{../objectPath}}
 * Interface: {{$.name}}
 */
export class {{className $.name}}{{#ifany signal.length property}}<L extends EventListenerSignature<L> = Record<string, never>> extends LooselyTypedEmitter<{{className $.name}}Events & L>{{/ifany}} {
    public static readonly DbusInterfaceName = '{{$.name}}';

    public dbusObject: DBus.ProxyObject;
    {{#if property}}public propertiesDBusInterface: DBus.ClientInterface;{{/if}}
    public thisDBusInterface: DBus.ClientInterface;

    public static Connect(bus: DBus.MessageBus, objectPath: string{{#if ../xmlData}} = "{{../objectPath}}"{{/if}}, xml{{#unless ../xmlData}}?{{/unless}}: string{{#if ../xmlData}} = XMLObjectData{{/if}}): Promise<{{className $.name}}> {
        return bus.getProxyObject('{{../serviceName}}', objectPath, xml).then((obj) => new {{className $.name}}(obj));
    }

    constructor(dbusObject: DBus.ProxyObject) {
        {{#ifany signal.length property}}super();
        {{/ifany}}this.dbusObject = dbusObject;
        this.thisDBusInterface = this.dbusObject.getInterface('{{$.name}}');
        {{#if property}}this.propertiesDBusInterface = this.dbusObject.getInterface('org.freedesktop.DBus.Properties');

        // forward property change events
        const forwardPropertyChange = (iface: string, changed: any, invalidated: any) => {
            if(iface === {{className $.name}}.DbusInterfaceName) {
                this.emit('PropertiesChanged', iface, unwrapDbusVariantObject(changed), invalidated);
            }
        }

        // forward all signals
        this.on("newListener", (event: string, listener: (...args: any[]) => void) => {
            if(event === "PropertiesChanged" && this.listenerCount('PropertiesChanged') === 0) {
                this.propertiesDBusInterface.addListener('PropertiesChanged', forwardPropertyChange);
            } else {
                this.thisDBusInterface.addListener(event, listener);
            }
        });
        this.on("removeListener", (event: string, listener: (...args: any[]) => void) => {
            if(event === "PropertiesChanged" && this.listenerCount('PropertiesChanged') === 0) {
                this.propertiesDBusInterface.removeListener('PropertiesChanged', forwardPropertyChange);
            } else {
                this.thisDBusInterface.removeListener(event, listener);
            }
        });{{else}}{{#if signal.length}}
        // forward all signals
        this.on("newListener", this.thisDBusInterface.addListener.bind(this.thisDBusInterface));
        this.on("removeListener", this.thisDBusInterface.removeListener.bind(this.thisDBusInterface));{{/if}}{{/if}}
    }
{{#if property}}
    /***** Properties *****/

    public getProperties(): Promise<Partial<{{className $.name}}Props>> {
        return this.propertiesDBusInterface.GetAll({{className $.name}}.DbusInterfaceName).then(unwrapDbusVariantObject);
    }

    public getProperty<T extends keyof {{className $.name}}Props>(name: T): Promise<{{className $.name}}Props[T]> {
        return this.propertiesDBusInterface.Get({{className $.name}}.DbusInterfaceName, name).then(unwrapDbusVariant);
    }

    public setProperty<T extends keyof {{className $.name}}Props>(name: T, value: {{className $.name}}Props[T]): Promise<void> {
        return this.propertiesDBusInterface.Set({{className $.name}}.DbusInterfaceName, name, wrapDbusVariant(value));
    }

    {{#each property}}
    //@property({ name: '{{$.name}}', signature: '{{$.type}}', access: {{accessConst $.access}} }){{#ifeq $.access "read"}}
    public {{$.name}}(): Promise<{{tsType $.type}}> {
        return this.propertiesDBusInterface.Get({{className ../$.name}}.DbusInterfaceName, '{{$.name}}'){{#unlesseq $.type "v"}}.then(unwrapDbusVariant){{/unlesseq}};
    }{{/ifeq}}{{#ifeq $.access "write"}}
    public {{$.name}}(value: {{tsType $.type}}): Promise<void> {
        return this.propertiesDBusInterface.Set({{className ../$.name}}.DbusInterfaceName, '{{$.name}}', wrapDbusVariant(value, "{{$.type}}"));
    }{{/ifeq}}{{#ifeq $.access "readwrite"}}
    public {{$.name}}(): Promise<{{tsType $.type}}>;
    public {{$.name}}(value: {{tsType $.type}}): Promise<void>;
    public {{$.name}}(value?: {{tsType $.type}}): Promise<any> {
        if(value !== undefined) {
            return this.propertiesDBusInterface.Set({{className ../$.name}}.DbusInterfaceName, '{{$.name}}', wrapDbusVariant(value, "{{$.type}}"));
        } else {
            return this.propertiesDBusInterface.Get({{className ../$.name}}.DbusInterfaceName, '{{$.name}}').then(unwrapDbusVariant);
        }
    }{{/ifeq}}

    {{/each}}
{{/if}}
    /***** Methods *****/

    {{#each method}}
    //@method({ name: '{{$.name}}', inSignature: '{{inSignature arg}}', outSignature: '{{outSignature arg}}' })
    public {{$.name}}({{#each arg}}{{#ifeq $.direction "in"}}{{varName $.name}}: {{tsType $.type}}{{#unless @last}}, {{/unless}}{{/ifeq}}{{/each}}): Promise<{{outType arg}}> {
        return this.thisDBusInterface.{{varName $.name}}({{#each arg}}{{#ifeq $.direction "in"}}wrapDbusSignature({{varName $.name}}, "{{$.type}}"){{#unless @last}}, {{/unless}}{{/ifeq}}{{/each}}){{#if (outSignature arg)}}.then(unwrapDbusSignature("{{outSignature arg}}")){{/if}};
    }

    {{/each}}
}
{{/each}}
