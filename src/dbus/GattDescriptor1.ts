import * as DBus from 'dbus-next';
import { 
    LooselyTypedEmitter, EventListenerSignature,
    wrapDbusVariant, wrapDbusVariantObject, wrapDbusVariantArray, wrapDbusSignature,
    unwrapDbusVariantObject, unwrapDbusVariantArray, unwrapDbusVariant, unwrapDbusVariantAll, unwrapDbusSignature
} from '../utilts';

/*
 * Generated by dbus-next interface generator
 * Template: typescript-class-auto.ts.hbs
 */


/***** Signals for org.bluez.GattDescriptor1 *****/
interface OrgBluezGattDescriptor1Events {

    "PropertiesChanged": (iface: string, changedProperties: {[key:string]: any}, invalidatedProperties: string[]) => void;
}
/***** Properties of org.bluez.GattDescriptor1 *****/
export interface OrgBluezGattDescriptor1Props {
    UUID: string;
    Characteristic: DBus.ObjectPath;
    Value: Buffer;
}
/**
 * Service: org.bluez
 * ObjectPath: /org/bluez/hci0/dev_80_E1_26_08_94_85/-/-/-
 * Interface: org.bluez.GattDescriptor1
 */
export class OrgBluezGattDescriptor1<L extends EventListenerSignature<L> = {}> extends LooselyTypedEmitter<OrgBluezGattDescriptor1Events & L> {
    public static readonly DbusInterfaceName = 'org.bluez.GattDescriptor1';

    public dbusObject: DBus.ProxyObject;
    public propertiesDBusInterface: DBus.ClientInterface;
    public thisDBusInterface: DBus.ClientInterface;

    public static Connect(bus: DBus.MessageBus, objectPath: string, xml?: string): Promise<OrgBluezGattDescriptor1> {
        return bus.getProxyObject('org.bluez', objectPath, xml).then((obj) => new OrgBluezGattDescriptor1(obj));
    }

    constructor(dbusObject: DBus.ProxyObject) {
        super();
        this.dbusObject = dbusObject;
        this.thisDBusInterface = this.dbusObject.getInterface('org.bluez.GattDescriptor1');
        this.propertiesDBusInterface = this.dbusObject.getInterface('org.freedesktop.DBus.Properties');

        // forward property change events
        const forwardPropertyChange = (iface: string, changed: any, invalidated: any) => {
            if(iface === OrgBluezGattDescriptor1.DbusInterfaceName) {
                this.emit('PropertiesChanged', iface, unwrapDbusVariantObject(changed), invalidated);
            }
        }

        // forward all signals
        this.on("newListener", (event: string, listener: (...args: any[]) => void) => {
            if(event === "PropertiesChanged" && this.listenerCount('PropertiesChanged') === 0) {
                this.propertiesDBusInterface.addListener('PropertiesChanged', forwardPropertyChange);
            } else {
                this.thisDBusInterface.addListener(event, listener);
            }
        });
        this.on("removeListener", (event: string, listener: (...args: any[]) => void) => {
            if(event === "PropertiesChanged" && this.listenerCount('PropertiesChanged') === 0) {
                this.propertiesDBusInterface.removeListener('PropertiesChanged', forwardPropertyChange);
            } else {
                this.thisDBusInterface.removeListener(event, listener);
            }
        });
    }
    /***** Properties *****/

    public getProperties(): Promise<Partial<OrgBluezGattDescriptor1Props>> {
        return this.propertiesDBusInterface.GetAll(OrgBluezGattDescriptor1.DbusInterfaceName).then(unwrapDbusVariantObject);
    }

    public getProperty<T extends keyof OrgBluezGattDescriptor1Props>(name: T): Promise<OrgBluezGattDescriptor1Props[T]> {
        return this.propertiesDBusInterface.Get(OrgBluezGattDescriptor1.DbusInterfaceName, name).then(unwrapDbusVariant);
    }

    public setProperty<T extends keyof OrgBluezGattDescriptor1Props>(name: T, value: OrgBluezGattDescriptor1Props[T]): Promise<void> {
        return this.propertiesDBusInterface.Set(OrgBluezGattDescriptor1.DbusInterfaceName, name, wrapDbusVariant(value));
    }

    //@property({ name: 'UUID', signature: 's', access: ACCESS_READ })
    public UUID(): Promise<string> {
        return this.propertiesDBusInterface.Get(OrgBluezGattDescriptor1.DbusInterfaceName, 'UUID').then(unwrapDbusVariant);
    }

    //@property({ name: 'Characteristic', signature: 'o', access: ACCESS_READ })
    public Characteristic(): Promise<DBus.ObjectPath> {
        return this.propertiesDBusInterface.Get(OrgBluezGattDescriptor1.DbusInterfaceName, 'Characteristic').then(unwrapDbusVariant);
    }

    //@property({ name: 'Value', signature: 'ay', access: ACCESS_READ })
    public Value(): Promise<Buffer> {
        return this.propertiesDBusInterface.Get(OrgBluezGattDescriptor1.DbusInterfaceName, 'Value').then(unwrapDbusVariant);
    }

    /***** Methods *****/

    //@method({ name: 'ReadValue', inSignature: 'a{sv}', outSignature: 'ay' })
    public ReadValue(options: {[key: string]: any}, ): Promise<Buffer> {
        return this.thisDBusInterface.ReadValue(wrapDbusSignature(options, "a{sv}"), ).then(unwrapDbusSignature("ay"));
    }

    //@method({ name: 'WriteValue', inSignature: 'aya{sv}', outSignature: '' })
    public WriteValue(value: Buffer, options: {[key: string]: any}): Promise<void> {
        return this.thisDBusInterface.WriteValue(wrapDbusSignature(value, "ay"), wrapDbusSignature(options, "a{sv}"));
    }

}
