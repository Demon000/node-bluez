import * as DBus from "dbus-next";
import { LooselyTypedEmitter, EventListenerSignature, wrapDbusSignature, unwrapDbusSignature } from "../utilts";

/*
 * Generated by dbus-next interface generator
 * Template: typescript-class-auto.ts.hbs
 */

/***** Signals for org.freedesktop.DBus.Properties *****/
interface OrgFreedesktopDBusPropertiesEvents {
    //@signal({ name: 'PropertiesChanged', signature: 'sa{sv}as' })
    PropertiesChanged: (
        interface_: string,
        changed_properties: { [key: string]: any },
        invalidated_properties: Array<string>,
    ) => void;
}
/**
 * Service: org.bluez
 * ObjectPath: /org/bluez/hci0/-
 * Interface: org.freedesktop.DBus.Properties
 */
export class OrgFreedesktopDBusProperties<
    L extends EventListenerSignature<L> = Record<string, never>,
> extends LooselyTypedEmitter<OrgFreedesktopDBusPropertiesEvents & L> {
    public static readonly DbusInterfaceName = "org.freedesktop.DBus.Properties";

    public dbusObject: DBus.ProxyObject;

    public thisDBusInterface: DBus.ClientInterface;

    public static Connect(
        bus: DBus.MessageBus,
        objectPath: string,
        xml?: string,
    ): Promise<OrgFreedesktopDBusProperties> {
        return bus.getProxyObject("org.bluez", objectPath, xml).then((obj) => new OrgFreedesktopDBusProperties(obj));
    }

    constructor(dbusObject: DBus.ProxyObject) {
        super();
        this.dbusObject = dbusObject;
        this.thisDBusInterface = this.dbusObject.getInterface("org.freedesktop.DBus.Properties");

        // forward all signals
        this.on("newListener", this.thisDBusInterface.addListener.bind(this.thisDBusInterface));
        this.on("removeListener", this.thisDBusInterface.removeListener.bind(this.thisDBusInterface));
    }
    /***** Methods *****/

    //@method({ name: 'Get', inSignature: 'ss', outSignature: 'v' })
    public Get(interface_: string, name: string): Promise<any> {
        return this.thisDBusInterface
            .Get(wrapDbusSignature(interface_, "s"), wrapDbusSignature(name, "s"))
            .then(unwrapDbusSignature("v"));
    }

    //@method({ name: 'Set', inSignature: 'ssv', outSignature: '' })
    public Set(interface_: string, name: string, value: any): Promise<void> {
        return this.thisDBusInterface.Set(
            wrapDbusSignature(interface_, "s"),
            wrapDbusSignature(name, "s"),
            wrapDbusSignature(value, "v"),
        );
    }

    //@method({ name: 'GetAll', inSignature: 's', outSignature: 'a{sv}' })
    public GetAll(interface_: string): Promise<{ [key: string]: any }> {
        return this.thisDBusInterface.GetAll(wrapDbusSignature(interface_, "s")).then(unwrapDbusSignature("a{sv}"));
    }
}
