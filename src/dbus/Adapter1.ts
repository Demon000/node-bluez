import * as DBus from 'dbus-next';
import { 
    LooselyTypedEmitter, EventListenerSignature,
    wrapDbusVariant, wrapDbusVariantObject, wrapDbusVariantArray, wrapDbusSignature,
    unwrapDbusVariantObject, unwrapDbusVariantArray, unwrapDbusVariant, unwrapDbusVariantAll, unwrapDbusSignature
} from '../utilts';

/*
 * Generated by dbus-next interface generator
 * Template: typescript-class-auto.ts.hbs
 */

// Introspection XML of org.bluez at /org/bluez/hci0
const XMLObjectData = `<!DOCTYPE node PUBLIC "-//freedesktop//DTD D-BUS Object Introspection 1.0//EN" "http://www.freedesktop.org/standards/dbus/1.0/introspect.dtd">
<node><interface name="org.freedesktop.DBus.Introspectable"><method name="Introspect"><arg name="xml" type="s" direction="out"/></method></interface><interface name="org.bluez.Adapter1"><method name="StartDiscovery"/><method name="SetDiscoveryFilter"><arg name="properties" type="a{sv}" direction="in"/></method><method name="StopDiscovery"/><method name="RemoveDevice"><arg name="device" type="o" direction="in"/></method><method name="GetDiscoveryFilters"><arg name="filters" type="as" direction="out"/></method><property name="Address" type="s" access="read"/><property name="AddressType" type="s" access="read"/><property name="Name" type="s" access="read"/><property name="Alias" type="s" access="readwrite"/><property name="Class" type="u" access="read"/><property name="Powered" type="b" access="readwrite"/><property name="Discoverable" type="b" access="readwrite"/><property name="DiscoverableTimeout" type="u" access="readwrite"/><property name="Pairable" type="b" access="readwrite"/><property name="PairableTimeout" type="u" access="readwrite"/><property name="Discovering" type="b" access="read"/><property name="UUIDs" type="as" access="read"/><property name="Modalias" type="s" access="read"/></interface><interface name="org.freedesktop.DBus.Properties"><method name="Get"><arg name="interface" type="s" direction="in"/><arg name="name" type="s" direction="in"/><arg name="value" type="v" direction="out"/></method><method name="Set"><arg name="interface" type="s" direction="in"/><arg name="name" type="s" direction="in"/><arg name="value" type="v" direction="in"/></method><method name="GetAll"><arg name="interface" type="s" direction="in"/><arg name="properties" type="a{sv}" direction="out"/></method><signal name="PropertiesChanged"><arg name="interface" type="s"/><arg name="changed_properties" type="a{sv}"/><arg name="invalidated_properties" type="as"/></signal></interface><interface name="org.bluez.GattManager1"><method name="RegisterApplication"><arg name="application" type="o" direction="in"/><arg name="options" type="a{sv}" direction="in"/></method><method name="UnregisterApplication"><arg name="application" type="o" direction="in"/></method></interface><interface name="org.bluez.LEAdvertisingManager1"><method name="RegisterAdvertisement"><arg name="advertisement" type="o" direction="in"/><arg name="options" type="a{sv}" direction="in"/></method><method name="UnregisterAdvertisement"><arg name="service" type="o" direction="in"/></method><property name="ActiveInstances" type="y" access="read"/><property name="SupportedInstances" type="y" access="read"/><property name="SupportedIncludes" type="as" access="read"/><property name="SupportedSecondaryChannels" type="as" access="read"/></interface><interface name="org.bluez.Media1"><method name="RegisterEndpoint"><arg name="endpoint" type="o" direction="in"/><arg name="properties" type="a{sv}" direction="in"/></method><method name="UnregisterEndpoint"><arg name="endpoint" type="o" direction="in"/></method><method name="RegisterPlayer"><arg name="player" type="o" direction="in"/><arg name="properties" type="a{sv}" direction="in"/></method><method name="UnregisterPlayer"><arg name="player" type="o" direction="in"/></method><method name="RegisterApplication"><arg name="application" type="o" direction="in"/><arg name="options" type="a{sv}" direction="in"/></method><method name="UnregisterApplication"><arg name="application" type="o" direction="in"/></method></interface><interface name="org.bluez.NetworkServer1"><method name="Register"><arg name="uuid" type="s" direction="in"/><arg name="bridge" type="s" direction="in"/></method><method name="Unregister"><arg name="uuid" type="s" direction="in"/></method></interface></node>`;

/***** Signals for org.bluez.Adapter1 *****/
interface OrgBluezAdapter1Events {

    "PropertiesChanged": (iface: string, changedProperties: {[key:string]: any}, invalidatedProperties: string[]) => void;
}
/***** Properties of org.bluez.Adapter1 *****/
export interface OrgBluezAdapter1Props {
    Address: string;
    AddressType: string;
    Name: string;
    Alias: string;
    Class: number;
    Powered: boolean;
    Discoverable: boolean;
    DiscoverableTimeout: number;
    Pairable: boolean;
    PairableTimeout: number;
    Discovering: boolean;
    UUIDs: Array<string>;
    Modalias: string;
}
/**
 * Service: org.bluez
 * ObjectPath: /org/bluez/hci0
 * Interface: org.bluez.Adapter1
 */
export class OrgBluezAdapter1<L extends EventListenerSignature<L> = Record<string, never>> extends LooselyTypedEmitter<OrgBluezAdapter1Events & L> {
    public static readonly DbusInterfaceName = 'org.bluez.Adapter1';

    public dbusObject: DBus.ProxyObject;
    public propertiesDBusInterface: DBus.ClientInterface;
    public thisDBusInterface: DBus.ClientInterface;

    public static Connect(bus: DBus.MessageBus, objectPath: string = "/org/bluez/hci0", xml: string = XMLObjectData): Promise<OrgBluezAdapter1> {
        return bus.getProxyObject('org.bluez', objectPath, xml).then((obj) => new OrgBluezAdapter1(obj));
    }

    constructor(dbusObject: DBus.ProxyObject) {
        super();
        this.dbusObject = dbusObject;
        this.thisDBusInterface = this.dbusObject.getInterface('org.bluez.Adapter1');
        this.propertiesDBusInterface = this.dbusObject.getInterface('org.freedesktop.DBus.Properties');

        // forward property change events
        const forwardPropertyChange = (iface: string, changed: any, invalidated: any) => {
            if(iface === OrgBluezAdapter1.DbusInterfaceName) {
                this.emit('PropertiesChanged', iface, unwrapDbusVariantObject(changed), invalidated);
            }
        }

        // forward all signals
        this.on("newListener", (event: string, listener: (...args: any[]) => void) => {
            if(event === "PropertiesChanged" && this.listenerCount('PropertiesChanged') === 0) {
                this.propertiesDBusInterface.addListener('PropertiesChanged', forwardPropertyChange);
            } else {
                this.thisDBusInterface.addListener(event, listener);
            }
        });
        this.on("removeListener", (event: string, listener: (...args: any[]) => void) => {
            if(event === "PropertiesChanged" && this.listenerCount('PropertiesChanged') === 0) {
                this.propertiesDBusInterface.removeListener('PropertiesChanged', forwardPropertyChange);
            } else {
                this.thisDBusInterface.removeListener(event, listener);
            }
        });
    }
    /***** Properties *****/

    public getProperties(): Promise<Partial<OrgBluezAdapter1Props>> {
        return this.propertiesDBusInterface.GetAll(OrgBluezAdapter1.DbusInterfaceName).then(unwrapDbusVariantObject);
    }

    public getProperty<T extends keyof OrgBluezAdapter1Props>(name: T): Promise<OrgBluezAdapter1Props[T]> {
        return this.propertiesDBusInterface.Get(OrgBluezAdapter1.DbusInterfaceName, name).then(unwrapDbusVariant);
    }

    public setProperty<T extends keyof OrgBluezAdapter1Props>(name: T, value: OrgBluezAdapter1Props[T]): Promise<void> {
        return this.propertiesDBusInterface.Set(OrgBluezAdapter1.DbusInterfaceName, name, wrapDbusVariant(value));
    }

    //@property({ name: 'Address', signature: 's', access: ACCESS_READ })
    public Address(): Promise<string> {
        return this.propertiesDBusInterface.Get(OrgBluezAdapter1.DbusInterfaceName, 'Address').then(unwrapDbusVariant);
    }

    //@property({ name: 'AddressType', signature: 's', access: ACCESS_READ })
    public AddressType(): Promise<string> {
        return this.propertiesDBusInterface.Get(OrgBluezAdapter1.DbusInterfaceName, 'AddressType').then(unwrapDbusVariant);
    }

    //@property({ name: 'Name', signature: 's', access: ACCESS_READ })
    public Name(): Promise<string> {
        return this.propertiesDBusInterface.Get(OrgBluezAdapter1.DbusInterfaceName, 'Name').then(unwrapDbusVariant);
    }

    //@property({ name: 'Alias', signature: 's', access: ACCESS_READWRITE })
    public Alias(): Promise<string>;
    public Alias(value: string): Promise<void>;
    public Alias(value?: string): Promise<any> {
        if(value !== undefined) {
            return this.propertiesDBusInterface.Set(OrgBluezAdapter1.DbusInterfaceName, 'Alias', wrapDbusVariant(value, "s"));
        } else {
            return this.propertiesDBusInterface.Get(OrgBluezAdapter1.DbusInterfaceName, 'Alias').then(unwrapDbusVariant);
        }
    }

    //@property({ name: 'Class', signature: 'u', access: ACCESS_READ })
    public Class(): Promise<number> {
        return this.propertiesDBusInterface.Get(OrgBluezAdapter1.DbusInterfaceName, 'Class').then(unwrapDbusVariant);
    }

    //@property({ name: 'Powered', signature: 'b', access: ACCESS_READWRITE })
    public Powered(): Promise<boolean>;
    public Powered(value: boolean): Promise<void>;
    public Powered(value?: boolean): Promise<any> {
        if(value !== undefined) {
            return this.propertiesDBusInterface.Set(OrgBluezAdapter1.DbusInterfaceName, 'Powered', wrapDbusVariant(value, "b"));
        } else {
            return this.propertiesDBusInterface.Get(OrgBluezAdapter1.DbusInterfaceName, 'Powered').then(unwrapDbusVariant);
        }
    }

    //@property({ name: 'Discoverable', signature: 'b', access: ACCESS_READWRITE })
    public Discoverable(): Promise<boolean>;
    public Discoverable(value: boolean): Promise<void>;
    public Discoverable(value?: boolean): Promise<any> {
        if(value !== undefined) {
            return this.propertiesDBusInterface.Set(OrgBluezAdapter1.DbusInterfaceName, 'Discoverable', wrapDbusVariant(value, "b"));
        } else {
            return this.propertiesDBusInterface.Get(OrgBluezAdapter1.DbusInterfaceName, 'Discoverable').then(unwrapDbusVariant);
        }
    }

    //@property({ name: 'DiscoverableTimeout', signature: 'u', access: ACCESS_READWRITE })
    public DiscoverableTimeout(): Promise<number>;
    public DiscoverableTimeout(value: number): Promise<void>;
    public DiscoverableTimeout(value?: number): Promise<any> {
        if(value !== undefined) {
            return this.propertiesDBusInterface.Set(OrgBluezAdapter1.DbusInterfaceName, 'DiscoverableTimeout', wrapDbusVariant(value, "u"));
        } else {
            return this.propertiesDBusInterface.Get(OrgBluezAdapter1.DbusInterfaceName, 'DiscoverableTimeout').then(unwrapDbusVariant);
        }
    }

    //@property({ name: 'Pairable', signature: 'b', access: ACCESS_READWRITE })
    public Pairable(): Promise<boolean>;
    public Pairable(value: boolean): Promise<void>;
    public Pairable(value?: boolean): Promise<any> {
        if(value !== undefined) {
            return this.propertiesDBusInterface.Set(OrgBluezAdapter1.DbusInterfaceName, 'Pairable', wrapDbusVariant(value, "b"));
        } else {
            return this.propertiesDBusInterface.Get(OrgBluezAdapter1.DbusInterfaceName, 'Pairable').then(unwrapDbusVariant);
        }
    }

    //@property({ name: 'PairableTimeout', signature: 'u', access: ACCESS_READWRITE })
    public PairableTimeout(): Promise<number>;
    public PairableTimeout(value: number): Promise<void>;
    public PairableTimeout(value?: number): Promise<any> {
        if(value !== undefined) {
            return this.propertiesDBusInterface.Set(OrgBluezAdapter1.DbusInterfaceName, 'PairableTimeout', wrapDbusVariant(value, "u"));
        } else {
            return this.propertiesDBusInterface.Get(OrgBluezAdapter1.DbusInterfaceName, 'PairableTimeout').then(unwrapDbusVariant);
        }
    }

    //@property({ name: 'Discovering', signature: 'b', access: ACCESS_READ })
    public Discovering(): Promise<boolean> {
        return this.propertiesDBusInterface.Get(OrgBluezAdapter1.DbusInterfaceName, 'Discovering').then(unwrapDbusVariant);
    }

    //@property({ name: 'UUIDs', signature: 'as', access: ACCESS_READ })
    public UUIDs(): Promise<Array<string>> {
        return this.propertiesDBusInterface.Get(OrgBluezAdapter1.DbusInterfaceName, 'UUIDs').then(unwrapDbusVariant);
    }

    //@property({ name: 'Modalias', signature: 's', access: ACCESS_READ })
    public Modalias(): Promise<string> {
        return this.propertiesDBusInterface.Get(OrgBluezAdapter1.DbusInterfaceName, 'Modalias').then(unwrapDbusVariant);
    }

    /***** Methods *****/

    //@method({ name: 'StartDiscovery', inSignature: '', outSignature: '' })
    public StartDiscovery(): Promise<void> {
        return this.thisDBusInterface.StartDiscovery();
    }

    //@method({ name: 'SetDiscoveryFilter', inSignature: 'a{sv}', outSignature: '' })
    public SetDiscoveryFilter(properties: {[key: string]: any}): Promise<void> {
        return this.thisDBusInterface.SetDiscoveryFilter(wrapDbusSignature(properties, "a{sv}"));
    }

    //@method({ name: 'StopDiscovery', inSignature: '', outSignature: '' })
    public StopDiscovery(): Promise<void> {
        return this.thisDBusInterface.StopDiscovery();
    }

    //@method({ name: 'RemoveDevice', inSignature: 'o', outSignature: '' })
    public RemoveDevice(device: DBus.ObjectPath): Promise<void> {
        return this.thisDBusInterface.RemoveDevice(wrapDbusSignature(device, "o"));
    }

    //@method({ name: 'GetDiscoveryFilters', inSignature: '', outSignature: 'as' })
    public GetDiscoveryFilters(): Promise<Array<string>> {
        return this.thisDBusInterface.GetDiscoveryFilters().then(unwrapDbusSignature("as"));
    }

}
