import * as DBus from 'dbus-next';
import { 
    LooselyTypedEmitter, EventListenerSignature,
    wrapDbusVariant, wrapDbusVariantObject, wrapDbusVariantArray, wrapDbusSignature,
    unwrapDbusVariantObject, unwrapDbusVariantArray, unwrapDbusVariant, unwrapDbusVariantAll, unwrapDbusSignature
} from '../utilts';

/*
 * Generated by dbus-next interface generator
 * Template: typescript-class-auto.ts.hbs
 */



/**
 * Service: org.bluez
 * ObjectPath: /-/bluez/hci0/-
 * Interface: org.freedesktop.DBus.Introspectable
 */
export class OrgFreedesktopDBusIntrospectable {
    public static readonly DbusInterfaceName = 'org.freedesktop.DBus.Introspectable';

    public dbusObject: DBus.ProxyObject;
    
    public thisDBusInterface: DBus.ClientInterface;

    public static Connect(bus: DBus.MessageBus, objectPath: string, xml?: string): Promise<OrgFreedesktopDBusIntrospectable> {
        return bus.getProxyObject('org.bluez', objectPath, xml).then((obj) => new OrgFreedesktopDBusIntrospectable(obj));
    }

    constructor(dbusObject: DBus.ProxyObject) {
        this.dbusObject = dbusObject;
        this.thisDBusInterface = this.dbusObject.getInterface('org.freedesktop.DBus.Introspectable');
        
    }
    /***** Methods *****/

    //@method({ name: 'Introspect', inSignature: '', outSignature: 's' })
    public Introspect(): Promise<string> {
        return this.thisDBusInterface.Introspect().then(unwrapDbusSignature("s"));
    }

}
