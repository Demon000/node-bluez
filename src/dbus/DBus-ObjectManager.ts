import * as DBus from 'dbus-next';
import { 
    LooselyTypedEmitter, EventListenerSignature,
    wrapDbusVariant, wrapDbusVariantObject, wrapDbusVariantArray, wrapDbusSignature,
    unwrapDbusVariantObject, unwrapDbusVariantArray, unwrapDbusVariant, unwrapDbusVariantAll, unwrapDbusSignature
} from '../utilts';

/*
 * Generated by dbus-next interface generator
 * Template: typescript-class-auto.ts.hbs
 */

// Introspection XML of org.bluez at /
const XMLObjectData = `<!DOCTYPE node PUBLIC "-//freedesktop//DTD D-BUS Object Introspection 1.0//EN" "http://www.freedesktop.org/standards/dbus/1.0/introspect.dtd">
<node><interface name="org.freedesktop.DBus.Introspectable"><method name="Introspect"><arg name="xml" type="s" direction="out"/></method></interface><interface name="org.freedesktop.DBus.ObjectManager"><method name="GetManagedObjects"><arg name="objects" type="a{oa{sa{sv}}}" direction="out"/></method><signal name="InterfacesAdded"><arg name="object" type="o"/><arg name="interfaces" type="a{sa{sv}}"/></signal><signal name="InterfacesRemoved"><arg name="object" type="o"/><arg name="interfaces" type="as"/></signal></interface></node>`;

/***** Signals for org.freedesktop.DBus.ObjectManager *****/
interface OrgFreedesktopDBusObjectManagerEvents {
    //@signal({ name: 'InterfacesAdded', signature: 'oa{sa{sv}}' })
    "InterfacesAdded": (object: DBus.ObjectPath, interfaces: /* a{sa{sv}} */ {[key:string]: any}) => void;
    //@signal({ name: 'InterfacesRemoved', signature: 'oas' })
    "InterfacesRemoved": (object: DBus.ObjectPath, interfaces: Array<string>) => void;

}
/**
 * Service: org.bluez
 * ObjectPath: /
 * Interface: org.freedesktop.DBus.ObjectManager
 */
export class OrgFreedesktopDBusObjectManager<L extends EventListenerSignature<L> = Record<string, never>> extends LooselyTypedEmitter<OrgFreedesktopDBusObjectManagerEvents & L> {
    public static readonly DbusInterfaceName = 'org.freedesktop.DBus.ObjectManager';

    public dbusObject: DBus.ProxyObject;
    
    public thisDBusInterface: DBus.ClientInterface;

    public static Connect(bus: DBus.MessageBus, objectPath: string = "/", xml: string = XMLObjectData): Promise<OrgFreedesktopDBusObjectManager> {
        return bus.getProxyObject('org.bluez', objectPath, xml).then((obj) => new OrgFreedesktopDBusObjectManager(obj));
    }

    constructor(dbusObject: DBus.ProxyObject) {
        super();
        this.dbusObject = dbusObject;
        this.thisDBusInterface = this.dbusObject.getInterface('org.freedesktop.DBus.ObjectManager');
        
        // forward all signals
        this.on("newListener", this.thisDBusInterface.addListener.bind(this.thisDBusInterface));
        this.on("removeListener", this.thisDBusInterface.removeListener.bind(this.thisDBusInterface));
    }
    /***** Methods *****/

    //@method({ name: 'GetManagedObjects', inSignature: '', outSignature: 'a{oa{sa{sv}}}' })
    public GetManagedObjects(): Promise</* a{oa{sa{sv}}} */ {[key:string]: any}> {
        return this.thisDBusInterface.GetManagedObjects().then(unwrapDbusSignature("a{oa{sa{sv}}}"));
    }

}
